// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                     = new(Query)
	AvtBuilding           *avtBuilding
	AvtCard               *avtCard
	AvtChapterKnowledge   *avtChapterKnowledge
	AvtCourse             *avtCourse
	AvtCourseChapter      *avtCourseChapter
	AvtDeviceState        *avtDeviceState
	AvtEquipment          *avtEquipment
	AvtFloor              *avtFloor
	AvtJoinnum            *avtJoinnum
	AvtLockLog            *avtLockLog
	AvtNetworkEquipment   *avtNetworkEquipment
	AvtOneCard            *avtOneCard
	AvtOperationLog       *avtOperationLog
	AvtPatrolLog          *avtPatrolLog
	AvtPayCardLog         *avtPayCardLog
	AvtRoom               *avtRoom
	AvtRoomCamera         *avtRoomCamera
	AvtSmartLock          *avtSmartLock
	AvtTask               *avtTask
	AvtTaskLog            *avtTaskLog
	AvtTimetable          *avtTimetable
	AvtTimetableConfig    *avtTimetableConfig
	AvtTimetableEx        *avtTimetableEx
	AvtWorkOrder          *avtWorkOrder
	AvtWtuTimetable       *avtWtuTimetable
	SysBackendUser        *sysBackendUser
	SysBackendUserRmsRole *sysBackendUserRmsRole
	SysEnumDatum          *sysEnumDatum
	SysLogintrace         *sysLogintrace
	SysOperationLog       *sysOperationLog
	SysOperator           *sysOperator
	SysResource           *sysResource
	SysRole               *sysRole
	SysRoleBackenduserRel *sysRoleBackenduserRel
	SysRoleResourceRel    *sysRoleResourceRel
	SysVal                *sysVal
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	AvtBuilding = &Q.AvtBuilding
	AvtCard = &Q.AvtCard
	AvtChapterKnowledge = &Q.AvtChapterKnowledge
	AvtCourse = &Q.AvtCourse
	AvtCourseChapter = &Q.AvtCourseChapter
	AvtDeviceState = &Q.AvtDeviceState
	AvtEquipment = &Q.AvtEquipment
	AvtFloor = &Q.AvtFloor
	AvtJoinnum = &Q.AvtJoinnum
	AvtLockLog = &Q.AvtLockLog
	AvtNetworkEquipment = &Q.AvtNetworkEquipment
	AvtOneCard = &Q.AvtOneCard
	AvtOperationLog = &Q.AvtOperationLog
	AvtPatrolLog = &Q.AvtPatrolLog
	AvtPayCardLog = &Q.AvtPayCardLog
	AvtRoom = &Q.AvtRoom
	AvtRoomCamera = &Q.AvtRoomCamera
	AvtSmartLock = &Q.AvtSmartLock
	AvtTask = &Q.AvtTask
	AvtTaskLog = &Q.AvtTaskLog
	AvtTimetable = &Q.AvtTimetable
	AvtTimetableConfig = &Q.AvtTimetableConfig
	AvtTimetableEx = &Q.AvtTimetableEx
	AvtWorkOrder = &Q.AvtWorkOrder
	AvtWtuTimetable = &Q.AvtWtuTimetable
	SysBackendUser = &Q.SysBackendUser
	SysBackendUserRmsRole = &Q.SysBackendUserRmsRole
	SysEnumDatum = &Q.SysEnumDatum
	SysLogintrace = &Q.SysLogintrace
	SysOperationLog = &Q.SysOperationLog
	SysOperator = &Q.SysOperator
	SysResource = &Q.SysResource
	SysRole = &Q.SysRole
	SysRoleBackenduserRel = &Q.SysRoleBackenduserRel
	SysRoleResourceRel = &Q.SysRoleResourceRel
	SysVal = &Q.SysVal
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                    db,
		AvtBuilding:           newAvtBuilding(db, opts...),
		AvtCard:               newAvtCard(db, opts...),
		AvtChapterKnowledge:   newAvtChapterKnowledge(db, opts...),
		AvtCourse:             newAvtCourse(db, opts...),
		AvtCourseChapter:      newAvtCourseChapter(db, opts...),
		AvtDeviceState:        newAvtDeviceState(db, opts...),
		AvtEquipment:          newAvtEquipment(db, opts...),
		AvtFloor:              newAvtFloor(db, opts...),
		AvtJoinnum:            newAvtJoinnum(db, opts...),
		AvtLockLog:            newAvtLockLog(db, opts...),
		AvtNetworkEquipment:   newAvtNetworkEquipment(db, opts...),
		AvtOneCard:            newAvtOneCard(db, opts...),
		AvtOperationLog:       newAvtOperationLog(db, opts...),
		AvtPatrolLog:          newAvtPatrolLog(db, opts...),
		AvtPayCardLog:         newAvtPayCardLog(db, opts...),
		AvtRoom:               newAvtRoom(db, opts...),
		AvtRoomCamera:         newAvtRoomCamera(db, opts...),
		AvtSmartLock:          newAvtSmartLock(db, opts...),
		AvtTask:               newAvtTask(db, opts...),
		AvtTaskLog:            newAvtTaskLog(db, opts...),
		AvtTimetable:          newAvtTimetable(db, opts...),
		AvtTimetableConfig:    newAvtTimetableConfig(db, opts...),
		AvtTimetableEx:        newAvtTimetableEx(db, opts...),
		AvtWorkOrder:          newAvtWorkOrder(db, opts...),
		AvtWtuTimetable:       newAvtWtuTimetable(db, opts...),
		SysBackendUser:        newSysBackendUser(db, opts...),
		SysBackendUserRmsRole: newSysBackendUserRmsRole(db, opts...),
		SysEnumDatum:          newSysEnumDatum(db, opts...),
		SysLogintrace:         newSysLogintrace(db, opts...),
		SysOperationLog:       newSysOperationLog(db, opts...),
		SysOperator:           newSysOperator(db, opts...),
		SysResource:           newSysResource(db, opts...),
		SysRole:               newSysRole(db, opts...),
		SysRoleBackenduserRel: newSysRoleBackenduserRel(db, opts...),
		SysRoleResourceRel:    newSysRoleResourceRel(db, opts...),
		SysVal:                newSysVal(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	AvtBuilding           avtBuilding
	AvtCard               avtCard
	AvtChapterKnowledge   avtChapterKnowledge
	AvtCourse             avtCourse
	AvtCourseChapter      avtCourseChapter
	AvtDeviceState        avtDeviceState
	AvtEquipment          avtEquipment
	AvtFloor              avtFloor
	AvtJoinnum            avtJoinnum
	AvtLockLog            avtLockLog
	AvtNetworkEquipment   avtNetworkEquipment
	AvtOneCard            avtOneCard
	AvtOperationLog       avtOperationLog
	AvtPatrolLog          avtPatrolLog
	AvtPayCardLog         avtPayCardLog
	AvtRoom               avtRoom
	AvtRoomCamera         avtRoomCamera
	AvtSmartLock          avtSmartLock
	AvtTask               avtTask
	AvtTaskLog            avtTaskLog
	AvtTimetable          avtTimetable
	AvtTimetableConfig    avtTimetableConfig
	AvtTimetableEx        avtTimetableEx
	AvtWorkOrder          avtWorkOrder
	AvtWtuTimetable       avtWtuTimetable
	SysBackendUser        sysBackendUser
	SysBackendUserRmsRole sysBackendUserRmsRole
	SysEnumDatum          sysEnumDatum
	SysLogintrace         sysLogintrace
	SysOperationLog       sysOperationLog
	SysOperator           sysOperator
	SysResource           sysResource
	SysRole               sysRole
	SysRoleBackenduserRel sysRoleBackenduserRel
	SysRoleResourceRel    sysRoleResourceRel
	SysVal                sysVal
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                    db,
		AvtBuilding:           q.AvtBuilding.clone(db),
		AvtCard:               q.AvtCard.clone(db),
		AvtChapterKnowledge:   q.AvtChapterKnowledge.clone(db),
		AvtCourse:             q.AvtCourse.clone(db),
		AvtCourseChapter:      q.AvtCourseChapter.clone(db),
		AvtDeviceState:        q.AvtDeviceState.clone(db),
		AvtEquipment:          q.AvtEquipment.clone(db),
		AvtFloor:              q.AvtFloor.clone(db),
		AvtJoinnum:            q.AvtJoinnum.clone(db),
		AvtLockLog:            q.AvtLockLog.clone(db),
		AvtNetworkEquipment:   q.AvtNetworkEquipment.clone(db),
		AvtOneCard:            q.AvtOneCard.clone(db),
		AvtOperationLog:       q.AvtOperationLog.clone(db),
		AvtPatrolLog:          q.AvtPatrolLog.clone(db),
		AvtPayCardLog:         q.AvtPayCardLog.clone(db),
		AvtRoom:               q.AvtRoom.clone(db),
		AvtRoomCamera:         q.AvtRoomCamera.clone(db),
		AvtSmartLock:          q.AvtSmartLock.clone(db),
		AvtTask:               q.AvtTask.clone(db),
		AvtTaskLog:            q.AvtTaskLog.clone(db),
		AvtTimetable:          q.AvtTimetable.clone(db),
		AvtTimetableConfig:    q.AvtTimetableConfig.clone(db),
		AvtTimetableEx:        q.AvtTimetableEx.clone(db),
		AvtWorkOrder:          q.AvtWorkOrder.clone(db),
		AvtWtuTimetable:       q.AvtWtuTimetable.clone(db),
		SysBackendUser:        q.SysBackendUser.clone(db),
		SysBackendUserRmsRole: q.SysBackendUserRmsRole.clone(db),
		SysEnumDatum:          q.SysEnumDatum.clone(db),
		SysLogintrace:         q.SysLogintrace.clone(db),
		SysOperationLog:       q.SysOperationLog.clone(db),
		SysOperator:           q.SysOperator.clone(db),
		SysResource:           q.SysResource.clone(db),
		SysRole:               q.SysRole.clone(db),
		SysRoleBackenduserRel: q.SysRoleBackenduserRel.clone(db),
		SysRoleResourceRel:    q.SysRoleResourceRel.clone(db),
		SysVal:                q.SysVal.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                    db,
		AvtBuilding:           q.AvtBuilding.replaceDB(db),
		AvtCard:               q.AvtCard.replaceDB(db),
		AvtChapterKnowledge:   q.AvtChapterKnowledge.replaceDB(db),
		AvtCourse:             q.AvtCourse.replaceDB(db),
		AvtCourseChapter:      q.AvtCourseChapter.replaceDB(db),
		AvtDeviceState:        q.AvtDeviceState.replaceDB(db),
		AvtEquipment:          q.AvtEquipment.replaceDB(db),
		AvtFloor:              q.AvtFloor.replaceDB(db),
		AvtJoinnum:            q.AvtJoinnum.replaceDB(db),
		AvtLockLog:            q.AvtLockLog.replaceDB(db),
		AvtNetworkEquipment:   q.AvtNetworkEquipment.replaceDB(db),
		AvtOneCard:            q.AvtOneCard.replaceDB(db),
		AvtOperationLog:       q.AvtOperationLog.replaceDB(db),
		AvtPatrolLog:          q.AvtPatrolLog.replaceDB(db),
		AvtPayCardLog:         q.AvtPayCardLog.replaceDB(db),
		AvtRoom:               q.AvtRoom.replaceDB(db),
		AvtRoomCamera:         q.AvtRoomCamera.replaceDB(db),
		AvtSmartLock:          q.AvtSmartLock.replaceDB(db),
		AvtTask:               q.AvtTask.replaceDB(db),
		AvtTaskLog:            q.AvtTaskLog.replaceDB(db),
		AvtTimetable:          q.AvtTimetable.replaceDB(db),
		AvtTimetableConfig:    q.AvtTimetableConfig.replaceDB(db),
		AvtTimetableEx:        q.AvtTimetableEx.replaceDB(db),
		AvtWorkOrder:          q.AvtWorkOrder.replaceDB(db),
		AvtWtuTimetable:       q.AvtWtuTimetable.replaceDB(db),
		SysBackendUser:        q.SysBackendUser.replaceDB(db),
		SysBackendUserRmsRole: q.SysBackendUserRmsRole.replaceDB(db),
		SysEnumDatum:          q.SysEnumDatum.replaceDB(db),
		SysLogintrace:         q.SysLogintrace.replaceDB(db),
		SysOperationLog:       q.SysOperationLog.replaceDB(db),
		SysOperator:           q.SysOperator.replaceDB(db),
		SysResource:           q.SysResource.replaceDB(db),
		SysRole:               q.SysRole.replaceDB(db),
		SysRoleBackenduserRel: q.SysRoleBackenduserRel.replaceDB(db),
		SysRoleResourceRel:    q.SysRoleResourceRel.replaceDB(db),
		SysVal:                q.SysVal.replaceDB(db),
	}
}

type queryCtx struct {
	AvtBuilding           IAvtBuildingDo
	AvtCard               IAvtCardDo
	AvtChapterKnowledge   IAvtChapterKnowledgeDo
	AvtCourse             IAvtCourseDo
	AvtCourseChapter      IAvtCourseChapterDo
	AvtDeviceState        IAvtDeviceStateDo
	AvtEquipment          IAvtEquipmentDo
	AvtFloor              IAvtFloorDo
	AvtJoinnum            IAvtJoinnumDo
	AvtLockLog            IAvtLockLogDo
	AvtNetworkEquipment   IAvtNetworkEquipmentDo
	AvtOneCard            IAvtOneCardDo
	AvtOperationLog       IAvtOperationLogDo
	AvtPatrolLog          IAvtPatrolLogDo
	AvtPayCardLog         IAvtPayCardLogDo
	AvtRoom               IAvtRoomDo
	AvtRoomCamera         IAvtRoomCameraDo
	AvtSmartLock          IAvtSmartLockDo
	AvtTask               IAvtTaskDo
	AvtTaskLog            IAvtTaskLogDo
	AvtTimetable          IAvtTimetableDo
	AvtTimetableConfig    IAvtTimetableConfigDo
	AvtTimetableEx        IAvtTimetableExDo
	AvtWorkOrder          IAvtWorkOrderDo
	AvtWtuTimetable       IAvtWtuTimetableDo
	SysBackendUser        ISysBackendUserDo
	SysBackendUserRmsRole ISysBackendUserRmsRoleDo
	SysEnumDatum          ISysEnumDatumDo
	SysLogintrace         ISysLogintraceDo
	SysOperationLog       ISysOperationLogDo
	SysOperator           ISysOperatorDo
	SysResource           ISysResourceDo
	SysRole               ISysRoleDo
	SysRoleBackenduserRel ISysRoleBackenduserRelDo
	SysRoleResourceRel    ISysRoleResourceRelDo
	SysVal                ISysValDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		AvtBuilding:           q.AvtBuilding.WithContext(ctx),
		AvtCard:               q.AvtCard.WithContext(ctx),
		AvtChapterKnowledge:   q.AvtChapterKnowledge.WithContext(ctx),
		AvtCourse:             q.AvtCourse.WithContext(ctx),
		AvtCourseChapter:      q.AvtCourseChapter.WithContext(ctx),
		AvtDeviceState:        q.AvtDeviceState.WithContext(ctx),
		AvtEquipment:          q.AvtEquipment.WithContext(ctx),
		AvtFloor:              q.AvtFloor.WithContext(ctx),
		AvtJoinnum:            q.AvtJoinnum.WithContext(ctx),
		AvtLockLog:            q.AvtLockLog.WithContext(ctx),
		AvtNetworkEquipment:   q.AvtNetworkEquipment.WithContext(ctx),
		AvtOneCard:            q.AvtOneCard.WithContext(ctx),
		AvtOperationLog:       q.AvtOperationLog.WithContext(ctx),
		AvtPatrolLog:          q.AvtPatrolLog.WithContext(ctx),
		AvtPayCardLog:         q.AvtPayCardLog.WithContext(ctx),
		AvtRoom:               q.AvtRoom.WithContext(ctx),
		AvtRoomCamera:         q.AvtRoomCamera.WithContext(ctx),
		AvtSmartLock:          q.AvtSmartLock.WithContext(ctx),
		AvtTask:               q.AvtTask.WithContext(ctx),
		AvtTaskLog:            q.AvtTaskLog.WithContext(ctx),
		AvtTimetable:          q.AvtTimetable.WithContext(ctx),
		AvtTimetableConfig:    q.AvtTimetableConfig.WithContext(ctx),
		AvtTimetableEx:        q.AvtTimetableEx.WithContext(ctx),
		AvtWorkOrder:          q.AvtWorkOrder.WithContext(ctx),
		AvtWtuTimetable:       q.AvtWtuTimetable.WithContext(ctx),
		SysBackendUser:        q.SysBackendUser.WithContext(ctx),
		SysBackendUserRmsRole: q.SysBackendUserRmsRole.WithContext(ctx),
		SysEnumDatum:          q.SysEnumDatum.WithContext(ctx),
		SysLogintrace:         q.SysLogintrace.WithContext(ctx),
		SysOperationLog:       q.SysOperationLog.WithContext(ctx),
		SysOperator:           q.SysOperator.WithContext(ctx),
		SysResource:           q.SysResource.WithContext(ctx),
		SysRole:               q.SysRole.WithContext(ctx),
		SysRoleBackenduserRel: q.SysRoleBackenduserRel.WithContext(ctx),
		SysRoleResourceRel:    q.SysRoleResourceRel.WithContext(ctx),
		SysVal:                q.SysVal.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
